import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
// import GoogleProvider from "next-auth/providers/google";
import { MongoClient, ObjectId } from "mongodb";
import bcrypt from "bcryptjs";
import { MongoDBAdapter } from "@next-auth/mongodb-adapter";
import { AdapterUser } from "next-auth/adapters";

// Types personnalisés
interface User extends AdapterUser {
  _id: ObjectId; // Ajout de la propriété _id
  role: string; // Ajout de la propriété role
}

// Configuration MongoDB
const client = new MongoClient(process.env.MONGODB_URI!);
const clientPromise = client.connect();

// Configuration NextAuth
const authOptions = {
  adapter: MongoDBAdapter(clientPromise),
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
    CredentialsProvider({
      credentials: {
        email: { label: "Email", type: "text" },
        password: { label: "Password", type: "password" },
      },
      authorize: async (credentials) => {
        try {
          const client = await clientPromise;
          const db = client.db();
          const user = await db
            .collection("users")
            .findOne({ email: credentials?.email });

          if (!user) return null;

          const isValid = await bcrypt.compare(
            credentials?.password ?? "",
            user.password
          );

          return isValid
            ? { id: user._id.toString(), email: user.email, name: user.name, role: user.role }
            : null;
        } catch (error) {
          console.error("Credentials auth error:", error);
          return null;
        }
      },
    }),
  ],
  session: { strategy: 'jwt' as const },
  secret: process.env.NEXTAUTH_SECRET,
  callbacks: {
    async jwt({ token, user }: { token: import("next-auth/jwt").JWT; user?: User }) {
      if (user) {
        token.role = user.role; // Ajout du rôle au token
      }
      return token;
    },
    async session({ session, token }: { session: import("next-auth").Session; token: import("next-auth/jwt").JWT }) {
      if (session.user) {
        session.user.role = token.role as string; // Ajout du rôle à la session
      }
      return session;
    },
  },
  pages: {
    signIn: "/auth/login", // Page de connexion personnalisée
  },
};

// Exporter une méthode HTTP nommée pour Next.js 13+
export const POST = NextAuth(authOptions);